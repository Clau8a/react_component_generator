{"version":3,"sources":["components/navbar/navbar.js","helpers/constants.js","components/form/form.component.jsx","components/resultComponents/proptTypesParams.component.jsx","components/resultComponents/propTypes.component.jsx","components/resultComponents/defaultPropsList.component.jsx","components/resultComponents/exportDefault.component.jsx","components/resultComponents/paramsList.component.jsx","components/resultComponents/defaultReturn.component.jsx","components/resultComponents/importReact.component.jsx","components/resultComponents/importPropTypes.component.jsx","components/resultComponents/formattedCode.component.jsx","components/resultComponents/componentCard.component.jsx","components/common/header.component.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","target","rel","varTypes","name","defaultValue","initialState","componentName","usePropTypes","useDefaultProps","params","newParam","isRequired","useSemiColon","reducer","state","action","payload","Form","dispatch","handleChange","e","value","console","log","toUpperCase","handleUpdateParams","idParam","map","param","handleNewParamChange","onChange","checked","key","onSubmit","preventDefault","checkValidity","length","required","PropTypesParams","find","p","parseInt","PropTypesList","props","useProptypes","DefaultPropsList","filter","ExportDefault","ParamsList","DefaultReturn","ImportReact","ImportPropTypes","FormattedCode","ComponentCard","Header","style","margin","App","React","useReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.feb70a6f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction NavBar() {\n  const newLocal = \"#\";\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n        <a className=\"navbar-brand\" href={newLocal}>RCG</a>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\" navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"/\">Home <span className=\"sr-only\">(current)</span></a>\n            </li>\n            <li className=\"nav-item active\">\n              <a className=\"nav-link\" href=\"https://github.com/Clau8a/react_component_generator\" target=\"_blank\" rel=\"noopener noreferrer\">gihub <span className=\"sr-only\">(current)</span></a>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <div className=\"container\"></div>\n    </div>\n  );\n}\n\nexport default NavBar;\n","export const varTypes = [\n  { id: 1, name: \"string\", defaultValue: \"''\" },\n  { id: 2, name: \"number\", defaultValue: \"null\" },\n  { id: 3, name: \"object\", defaultValue: \"null\" },\n  { id: 4, name: \"func\", defaultValue: \"f => f\" },\n  { id: 5, name: \"array\", defaultValue: \"[]\" },\n  { id: 6, name: \"arrayof(string)\", defaultValue: \"null\" },\n  { id: 7, name: \"arrayof(number)\", defaultValue: \"null\" },\n];\n\nexport const defaultReturn = () => {\n  return \"  return <></>;\";\n};\n\n\n\nexport const initialState = {\n  componentName: 'MyComponent',\n  usePropTypes: false,\n  useDefaultProps: false,\n  params: [],\n  newParam: { name: '', type: '', isRequired: false },\n  useSemiColon: true,\n};\n\n\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_NAME\":\n      return { ...state, componentName: action.payload };\n    case \"SET_USE_PROPTYPES\":\n      return { ...state, usePropTypes: action.payload };\n    case \"SET_USE_DEFAULTPROPS\":\n      return { ...state, useDefaultProps: action.payload };\n    case \"SET_PARAMS\":\n      return { ...state, params: action.payload };\n    case \"SET_NEW_PARAM\":\n      return { ...state, newParam: action.payload };\n    default:\n      return { ...state };\n  }\n}\n","import React from \"react\";\nimport { varTypes, initialState } from \"../../helpers/constants\";\n\nconst Form = ({ state, dispatch }) => {\n  const { componentName, usePropTypes, useDefaultProps, params, newParam } =\n    state;\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    console.log(`SET_${name.toUpperCase()}`, value);\n    dispatch({ type: `SET_${name.toUpperCase()}`, payload: value });\n  };\n\n  const handleUpdateParams = (e, idParam) => {\n    const { name, value } = e.target;\n    dispatch({\n      type: \"SET_PARAMS\",\n      payload: params.map((param) =>\n        param.id === idParam ? { ...param, [name]: value } : param\n      ),\n    });\n  };\n\n  const handleAddParam = (e) => {\n    e.preventDefault();\n    if (e.target.checkValidity()) {\n      dispatch({\n        type: \"SET_PARAMS\",\n        payload: [...params, { ...newParam, id: params.length + 1 }]\n      })\n      dispatch({\n        type: \"SET_NEW_PARAM\",\n        payload: initialState.newParam\n      })\n    }\n  }\n\n  const handleNewParamChange = (e) => {\n    const { name, value } = e.target;\n    dispatch({\n      type: \"SET_NEW_PARAM\",\n      payload: { ...newParam, [name]: value }\n    })\n  };\n\n  return (\n    <div className=\"form\">\n      <div className=\"row\">\n        <div className=\"col-12 col-md-6 form-group\">\n          <label>Component Name</label>\n          <input\n            className=\"form-control\"\n            name=\"NAME\"\n            value={componentName}\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"col-12 col-md-2 form-group\">\n          <label>PropTypes</label>\n          <div className=\"form-group form-check\">\n            <input\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"proptypes\"\n              checked={usePropTypes}\n              onChange={() =>\n                handleChange({\n                  target: { name: \"use_proptypes\", value: !usePropTypes },\n                })\n              }\n            />\n          </div>\n        </div>\n        <div className=\"col-12 col-md-2 form-group\">\n          <label>defaultProps</label>\n          <div className=\"form-group form-check\">\n            <input\n              type=\"checkbox\"\n              className=\"form-check-input\"\n              id=\"defaultprops\"\n              checked={useDefaultProps}\n              onChange={() =>\n                handleChange({\n                  target: { name: \"use_defaultprops\", value: !useDefaultProps },\n                })\n              }\n            />\n          </div>\n        </div>\n      </div>\n      <label>Parameters</label>\n      <hr />\n      <div className=\"\">\n        {params.map((param) => (\n          <div className=\"row\" key={param.id}>\n            <div className=\"col-md-6\">\n              <label>Name</label>\n              <input\n                className=\"form-control\"\n                name=\"name\"\n                value={param.name}\n                onChange={(e) => handleUpdateParams(e, param.id)}\n              />\n            </div>\n            <div className=\"col-md-4\">\n              <label>Type</label>\n              <select\n                className=\"form-control\"\n                name=\"type\"\n                value={param.type}\n                onChange={(e) => handleUpdateParams(e, param.id)}\n              >\n                {varTypes.map((type) => (\n                  <option key={type.id} value={type.id}>\n                    {type.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col-md-2\">\n              <label>required?</label>\n              <div className=\"form-group form-check\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  checked={param.isRequired}\n                  onChange={(e) =>\n                    handleUpdateParams(\n                      {\n                        target: {\n                          name: \"isRequired\",\n                          value: !param.isRequired,\n                        },\n                      },\n                      param.id\n                    )\n                  }\n                />\n              </div>\n            </div>\n          </div>\n        ))}\n        <form onSubmit={handleAddParam}>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <label>Name</label>\n              <input\n                className=\"form-control\"\n                value={newParam.name}\n                name=\"name\"\n                onChange={handleNewParamChange}\n                required\n              />\n            </div>\n            <div className=\"col-md-4\">\n              <label>Type</label>\n              <select\n                className=\"form-control\"\n                value={newParam.type}\n                name=\"type\"\n                onChange={handleNewParamChange}\n                required\n              >\n                <option value=\"\">Select type</option>\n                {varTypes.map((type) => (\n                  <option key={type.id} value={type.id}>\n                    {type.name}\n                  </option>\n                ))}\n              </select>\n            </div>\n            <div className=\"col-md-2\">\n              <label>required?</label>\n              <div className=\"form-group form-check\">\n                <input\n                  type=\"checkbox\"\n                  className=\"form-check-input\"\n                  checked={newParam.isRequired}\n                  onChange={(e) =>\n                    handleNewParamChange({\n                      target: {\n                        name: \"isRequired\",\n                        value: !newParam.isRequired,\n                      },\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n          <div>\n            <button className=\"btn btn-success\" type=\"submit\">\n              Add\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default Form;\n","import React from \"react\";\nimport { varTypes } from \"../../helpers/constants\";\n\nconst PropTypesParams = (params) => {\n  return (\n    <div>\n      {params.map((param) => (\n        <label key={param.name + param.id}>\n          &nbsp;&nbsp;\n          {`${param.name}: PropTypes.${\n            varTypes.find((p) => p.id === parseInt(param.type, 10)).name\n          }${param.isRequired ? \".isRequired\" : \"\"},`}\n        </label>\n      ))}\n    </div>\n  );\n};\n\nexport default PropTypesParams;\n","import React from \"react\";\nimport PropTypesParams from \"./proptTypesParams.component\";\n\nconst PropTypesList = (props) => {\n  const { componentName, useProptypes, params } = props;\n  if (!useProptypes) {\n    return null;\n  }\n  return (\n    <div>\n      <label>\n        <b>{componentName}</b>\n        {`.propTypes = {`}\n      </label>\n      <PropTypesParams params={params} />\n      <label>{\"};\"}</label>\n    </div>\n  );\n};\n\nexport default PropTypesList;\n","import React from \"react\";\nimport { varTypes } from \"../../helpers/constants\";\n\nconst DefaultPropsList = (props) => {\n  const { componentName, useDefaultProps, params } = props;\n  if (!useDefaultProps) {\n    return null;\n  }\n  return (\n    <div>\n      <label>\n        <b>{componentName}</b>\n        {`.defaultProps = {`}\n      </label>\n      <div>\n        {params\n          .filter((param) => !param.isRequired)\n          .map((param) => (\n            <label key={param.name + param.id}>\n              &nbsp;&nbsp;\n              {`${param.name}: ${\n                varTypes.find((p) => p.id === parseInt(param.type, 10))\n                  .defaultValue\n              },`}\n            </label>\n          ))}\n      </div>\n      <label>{\"};\"}</label>\n    </div>\n  );\n};\n\nexport default DefaultPropsList;\n","import React from \"react\";\n\nconst ExportDefault = ({ componentName }) => {\n  return (\n    <label>\n      <span className=\"reservedWord\">export default</span>\n      <b> {componentName}</b>;\n    </label>\n  );\n};\n\nexport default ExportDefault;\n","import React from \"react\";\n\nconst ParamsList = (props) => {\n  const { componentName, params } = props;\n\n  if (params.length === 0) {\n    return (\n      <label>\n        <span className=\"reservedWord\">const </span> <b>{componentName}</b>\n        {` = () =>{`}\n      </label>\n    );\n  }\n\n  return (\n    <>\n      <label>\n        <span className=\"reservedWord\">const </span> <b>{componentName}</b>\n        {`  = ({`}\n      </label>\n      &nbsp;&nbsp;\n      {params.map((param) => (\n        <span key={param.id}>{`${param.name}, `}</span>\n      ))}\n      <label>{`})=>{`}</label>\n    </>\n  );\n};\n\nexport default ParamsList;\n","import React from \"react\";\n\nconst DefaultReturn = () => {\n  return(<label> &nbsp;&nbsp;<span className=\"reservedWord\">return</span>{\" <></>;\"}</label>)\n};\n\nexport default DefaultReturn;\n","import React from \"react\";\n\nconst ImportReact = () => {\n  return (\n    <label>\n      <span className=\"reservedWord\">import </span>\n      React\n      <span className=\"reservedWord\"> from </span>\n      <span className=\"string\">'react'</span>;\n    </label>\n  );\n};\n\nexport default ImportReact;\n","import React from \"react\";\n\nconst ImportPropTypes = ({usePropTypes}) => {\n  if (!usePropTypes) {\n    return null;\n  }\n\n  return (\n    <label>\n      <span className=\"reservedWord\">import </span>\n      PropTypes\n      <span className=\"reservedWord\"> from </span>\n      <span className=\"string\">'prop-types'</span>;\n    </label>\n  );\n};\n\nexport default ImportPropTypes;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PropTypesList from \"./propTypes.component\";\nimport DefaultPropsList from \"./defaultPropsList.component\";\nimport ExportDefault from \"./exportDefault.component\";\nimport ParamsList from \"./paramsList.component\";\nimport DefaultReturn from \"./defaultReturn.component\";\nimport ImportReact from \"./importReact.component\";\nimport ImportPropTypes from \"./importPropTypes.component\";\n\nconst FormattedCode = (props) => {\n  const { usePropTypes, componentName, params, useDefaultProps } = props;\n  return (\n    <div className=\"compiled\">\n      <code>\n        <ImportReact />\n        <ImportPropTypes usePropTypes={usePropTypes} />\n        {componentName && (\n          <div>\n            <br />\n            <ParamsList componentName={componentName} params={params} />\n            <DefaultReturn />\n            <label>{\"};\"}</label>\n            <br />\n            <PropTypesList\n              componentName={componentName}\n              usePropTypes={usePropTypes}\n              params={params}\n            />\n            <br />\n            <DefaultPropsList\n              componentName={componentName}\n              useDefaultProps={useDefaultProps}\n              params={params}\n            />\n            <ExportDefault componentName={componentName} />\n          </div>\n        )}\n      </code>\n    </div>\n  );\n};\n\nFormattedCode.propTypes = {\n  componentName: PropTypes.string,\n  params: PropTypes.array,\n  usePropTypes: PropTypes.bool,\n  useDefaultProps: PropTypes.bool,\n  defaultProps: PropTypes.func,\n  propTypesParams: PropTypes.func,\n};\n\nexport default FormattedCode;\n","import React from \"react\";\nimport FormattedCode from \"./formattedCode.component\";\n\nconst ComponentCard = ({ state }) => {\n  return (\n    <div className=\"col-12 col-md-6\">\n      <div className=\"card\">\n        <div className=\"card-header\">\n          Component <b>{state.componentName}</b>\n        </div>\n        <div className=\"card-body\">\n            <FormattedCode {...state} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ComponentCard;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header style={{ margin: \"1em 0\" }}>\n      <h2>React component Generator</h2>\n    </header>\n  );\n};\n\nexport default Header\n\n","import React from \"react\";\nimport NavBar from \"./components/navbar/navbar\";\nimport Form from \"./components/form/form.component\";\nimport { reducer, initialState } from './helpers/constants'\nimport \"./App.css\";\nimport ComponentCard from \"./components/resultComponents/componentCard.component\";\nimport Header from \"./components/common/header.component\";\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  return (\n    <div>\n      <NavBar />\n      <div className=\"container\">\n        <Header />\n        <div className=\"wrapper\">\n          <Form state={state} dispatch={dispatch} />\n          <ComponentCard state={state} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}